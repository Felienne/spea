{
    "block": {
        "name": "code",
        "text": "",
        "video": null,
        "animation": null,
        "options": {
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "limits": {
                "python3": {
                    "time": 15,
                    "memory": 256
                }
            },
            "code_templates": {
                "python3": "class AboutMultipleInheritance(unittest.TestCase):\n    class Nameable:\n        def __init__(self):\n            self._name = None\n\n        def set_name(self, new_name):\n            self._name = new_name\n\n        def here(self):\n            return \"In Nameable class\"\n\n    class Animal:\n        def legs(self):\n            return 4\n\n        def can_climb_walls(self):\n            return False\n\n        def here(self):\n            return \"In Animal class\"\n\n    class Pig(Animal):\n        def __init__(self):\n            super().__init__()\n            self._name = \"Jasper\"\n\n        @property\n        def name(self):\n            return self._name\n\n        def speak(self):\n            return \"OINK\"\n\n        def color(self):\n            return 'pink'\n\n        def here(self):\n            return \"In Pig class\"\n\n    class Spider(Animal):\n        def __init__(self):\n            super().__init__()\n            self._name = \"Boris\"\n\n        def can_climb_walls(self):\n            return True\n\n        def legs(self):\n            return 8\n\n        def color(self):\n            return 'black'\n\n        def here(self):\n            return \"In Spider class\"\n\n    class Spiderpig(Pig, Spider, Nameable):\n        def __init__(self):\n            super(AboutMultipleInheritance.Pig, self).__init__()\n            super(AboutMultipleInheritance.Nameable, self).__init__()\n            self._name = \"Jeff\"\n\n        def speak(self):\n            return \"This looks like a job for Spiderpig!\"\n\n        def here(self):\n            return \"In Spiderpig class\"\n\n    #\n    # Hierarchy:\n    #               Animal\n    #              /     \\\n    #            Pig   Spider  Nameable\n    #              \\      |      /\n    #                 Spiderpig\n    #\n    # ------------------------------------------------------------------\n\n    def test_super_class_methods_are_higher_priority_than_super_super_classes(self):\n        jeff = self.Spiderpig()\n        self.assertEqual(__, jeff.legs())"
            },
            "code_templates_options": {},
            "samples": [
                [
                    "",
                    ""
                ]
            ]
        },
        "subtitle_files": [],
        "source": {
            "execution_time_limit": 5,
            "is_memory_limit_scaled": true,
            "test_archive": [],
            "manual_memory_limits": [],
            "code": "def generate():\n    return [(\"\",\"\")]\n\ndef solve(dataset):\n    return \"\"\n\ndef check(reply, clue):\n    return 1\n\n",
            "manual_time_limits": [],
            "execution_memory_limit": 256,
            "is_time_limit_scaled": true,
            "templates_data": "::python3\n::header\nimport unittest\n__ = \"-=> FILL ME IN! <=-\"\n\n::code\nclass AboutMultipleInheritance(unittest.TestCase):\n    class Nameable:\n        def __init__(self):\n            self._name = None\n\n        def set_name(self, new_name):\n            self._name = new_name\n\n        def here(self):\n            return \"In Nameable class\"\n\n    class Animal:\n        def legs(self):\n            return 4\n\n        def can_climb_walls(self):\n            return False\n\n        def here(self):\n            return \"In Animal class\"\n\n    class Pig(Animal):\n        def __init__(self):\n            super().__init__()\n            self._name = \"Jasper\"\n\n        @property\n        def name(self):\n            return self._name\n\n        def speak(self):\n            return \"OINK\"\n\n        def color(self):\n            return 'pink'\n\n        def here(self):\n            return \"In Pig class\"\n\n    class Spider(Animal):\n        def __init__(self):\n            super().__init__()\n            self._name = \"Boris\"\n\n        def can_climb_walls(self):\n            return True\n\n        def legs(self):\n            return 8\n\n        def color(self):\n            return 'black'\n\n        def here(self):\n            return \"In Spider class\"\n\n    class Spiderpig(Pig, Spider, Nameable):\n        def __init__(self):\n            super(AboutMultipleInheritance.Pig, self).__init__()\n            super(AboutMultipleInheritance.Nameable, self).__init__()\n            self._name = \"Jeff\"\n\n        def speak(self):\n            return \"This looks like a job for Spiderpig!\"\n\n        def here(self):\n            return \"In Spiderpig class\"\n\n    #\n    # Hierarchy:\n    #               Animal\n    #              /     \\\n    #            Pig   Spider  Nameable\n    #              \\      |      /\n    #                 Spiderpig\n    #\n    # ------------------------------------------------------------------\n    \n    def test_super_class_methods_are_higher_priority_than_super_super_classes(self):\n        jeff = self.Spiderpig()\n        self.assertEqual(__, jeff.legs())\n\n::footer\nif __name__ == '__main__':\n    unittest.main()\n\n\n",
            "samples_count": 1
        },
        "subtitles": {},
        "tests_archive": "/api/step-sources/296732/tests",
        "feedback_correct": "",
        "feedback_wrong": ""
    },
    "id": "296732",
    "time": "2018-05-10T16:29:00.777789"
}