{
    "block": {
        "name": "code",
        "text": "<p>Print all points between and including (-5,-5) and (5,5), ordered by the x coordinate. <br><br>So:</p><p><b>(-5, -5)</b><br><b>(-5, -4)</b><br><b>(-5, -3)</b><br><b>(-5, -2)</b><br><b>(-5, -1)</b><br><b>(-5, 0)</b><br><b>(-5, 1)</b><br><b>(-5, 2)</b><br>etc...</p>",
        "video": null,
        "animation": null,
        "options": {
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "limits": {
                "python3": {
                    "time": 15,
                    "memory": 256
                }
            },
            "code_templates": {
                "python3": "for x in range(-5,5):\n    for y in range(-5,5):\n        print(x,y)"
            },
            "code_templates_options": {},
            "samples": [
                [
                    "",
                    "(-5, -5)\n(-5, -4)\n(-5, -3)\n(-5, -2)\n(-5, -1)\n(-5, 0)\n(-5, 1)\n(-5, 2)\n(-5, 3)\n(-5, 4)\n(-5, 5)\n(-4, -5)\n(-4, -4)\n(-4, -3)\n(-4, -2)\n(-4, -1)\n(-4, 0)\n(-4, 1)\n(-4, 2)\n(-4, 3)\n(-4, 4)\n(-4, 5)\n(-3, -5)\n(-3, -4)\n(-3, -3)\n(-3, -2)\n(-3, -1)\n(-3, 0)\n(-3, 1)\n(-3, 2)\n(-3, 3)\n(-3, 4)\n(-3, 5)\n(-2, -5)\n(-2, -4)\n(-2, -3)\n(-2, -2)\n(-2, -1)\n(-2, 0)\n(-2, 1)\n(-2, 2)\n(-2, 3)\n(-2, 4)\n(-2, 5)\n(-1, -5)\n(-1, -4)\n(-1, -3)\n(-1, -2)\n(-1, -1)\n(-1, 0)\n(-1, 1)\n(-1, 2)\n(-1, 3)\n(-1, 4)\n(-1, 5)\n(0, -5)\n(0, -4)\n(0, -3)\n(0, -2)\n(0, -1)\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3)\n(0, 4)\n(0, 5)\n(1, -5)\n(1, -4)\n(1, -3)\n(1, -2)\n(1, -1)\n(1, 0)\n(1, 1)\n(1, 2)\n(1, 3)\n(1, 4)\n(1, 5)\n(2, -5)\n(2, -4)\n(2, -3)\n(2, -2)\n(2, -1)\n(2, 0)\n(2, 1)\n(2, 2)\n(2, 3)\n(2, 4)\n(2, 5)\n(3, -5)\n(3, -4)\n(3, -3)\n(3, -2)\n(3, -1)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n(3, 4)\n(3, 5)\n(4, -5)\n(4, -4)\n(4, -3)\n(4, -2)\n(4, -1)\n(4, 0)\n(4, 1)\n(4, 2)\n(4, 3)\n(4, 4)\n(4, 5)\n(5, -5)\n(5, -4)\n(5, -3)\n(5, -2)\n(5, -1)\n(5, 0)\n(5, 1)\n(5, 2)\n(5, 3)\n(5, 4)\n(5, 5)"
                ]
            ]
        },
        "subtitle_files": [],
        "source": {
            "code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))",
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "samples_count": 1,
            "templates_data": "::python3\n::header\n__ = \"blank\"\ndef assertEqual(x,y):\n    if x == y:\n        pass\n    else:\n        message = str(x) + ' is not ' + str(y)\n        raise AssertionError(message)   \n::code\nfor x in range(-5,5):\n    for y in range(-5,5):\n        print(x,y)\n\n\n\n",
            "is_time_limit_scaled": true,
            "is_memory_limit_scaled": true,
            "manual_time_limits": [],
            "manual_memory_limits": [],
            "test_archive": [],
            "test_cases": [
                [
                    "",
                    "(-5, -5)\n(-5, -4)\n(-5, -3)\n(-5, -2)\n(-5, -1)\n(-5, 0)\n(-5, 1)\n(-5, 2)\n(-5, 3)\n(-5, 4)\n(-5, 5)\n(-4, -5)\n(-4, -4)\n(-4, -3)\n(-4, -2)\n(-4, -1)\n(-4, 0)\n(-4, 1)\n(-4, 2)\n(-4, 3)\n(-4, 4)\n(-4, 5)\n(-3, -5)\n(-3, -4)\n(-3, -3)\n(-3, -2)\n(-3, -1)\n(-3, 0)\n(-3, 1)\n(-3, 2)\n(-3, 3)\n(-3, 4)\n(-3, 5)\n(-2, -5)\n(-2, -4)\n(-2, -3)\n(-2, -2)\n(-2, -1)\n(-2, 0)\n(-2, 1)\n(-2, 2)\n(-2, 3)\n(-2, 4)\n(-2, 5)\n(-1, -5)\n(-1, -4)\n(-1, -3)\n(-1, -2)\n(-1, -1)\n(-1, 0)\n(-1, 1)\n(-1, 2)\n(-1, 3)\n(-1, 4)\n(-1, 5)\n(0, -5)\n(0, -4)\n(0, -3)\n(0, -2)\n(0, -1)\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3)\n(0, 4)\n(0, 5)\n(1, -5)\n(1, -4)\n(1, -3)\n(1, -2)\n(1, -1)\n(1, 0)\n(1, 1)\n(1, 2)\n(1, 3)\n(1, 4)\n(1, 5)\n(2, -5)\n(2, -4)\n(2, -3)\n(2, -2)\n(2, -1)\n(2, 0)\n(2, 1)\n(2, 2)\n(2, 3)\n(2, 4)\n(2, 5)\n(3, -5)\n(3, -4)\n(3, -3)\n(3, -2)\n(3, -1)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n(3, 4)\n(3, 5)\n(4, -5)\n(4, -4)\n(4, -3)\n(4, -2)\n(4, -1)\n(4, 0)\n(4, 1)\n(4, 2)\n(4, 3)\n(4, 4)\n(4, 5)\n(5, -5)\n(5, -4)\n(5, -3)\n(5, -2)\n(5, -1)\n(5, 0)\n(5, 1)\n(5, 2)\n(5, 3)\n(5, 4)\n(5, 5)"
                ]
            ]
        },
        "subtitles": {},
        "tests_archive": "/api/step-sources/324737/tests",
        "feedback_correct": "",
        "feedback_wrong": ""
    },
    "id": "324737",
    "time": "2018-05-10T16:25:42.713776"
}