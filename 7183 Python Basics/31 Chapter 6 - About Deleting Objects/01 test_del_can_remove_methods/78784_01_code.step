{
    "block": {
        "name": "code",
        "text": "",
        "video": null,
        "animation": null,
        "options": {
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "limits": {
                "python3": {
                    "time": 15,
                    "memory": 256
                }
            },
            "code_templates": {
                "python3": "class AboutAssignments(unittest.TestCase):\n    class Bird:\n        def __init__(self):\n            self.wings = 2\n\n        def fly(self):\n            return \"I believe I can fly\"\n\n    def test_del_can_remove_methods(self):\n        flappy = self.Bird()\n        polly = self.Bird()\n\n        del self.Bird.fly\n\n        try:\n            still_available = flappy.fly()\n        except AttributeError as e:\n            error_message_flappy = e.args[0]\n        self.assertEqual(error_message_flappy, __)\n\n        try:\n            still_available = polly.fly()\n        except AttributeError as e:\n            error_message_polly = e.args[0]\n        self.assertEqual(error_message_polly, __)"
            },
            "code_templates_options": {},
            "samples": [
                [
                    "",
                    ""
                ]
            ]
        },
        "subtitle_files": [],
        "source": {
            "execution_time_limit": 5,
            "is_memory_limit_scaled": true,
            "test_archive": [],
            "manual_memory_limits": [],
            "code": "def generate():\n    return [(\"\",\"\")]\n\ndef solve(dataset):\n    return \"\"\n\ndef check(reply, clue):\n    return 1\n\n",
            "manual_time_limits": [],
            "execution_memory_limit": 256,
            "is_time_limit_scaled": true,
            "templates_data": "::python3\n::header\nimport unittest\n__ = \"-=> FILL ME IN! <=-\"\n\n::code\nclass AboutAssignments(unittest.TestCase):\n    class Bird:\n        def __init__(self):\n            self.wings = 2\n\n        def fly(self):\n            return \"I believe I can fly\"\n    \n    def test_del_can_remove_methods(self):\n        flappy = self.Bird()\n        polly = self.Bird()\n\n        del self.Bird.fly\n\n        try:\n            still_available = flappy.fly()\n        except AttributeError as e:\n            error_message_flappy = e.args[0]\n        self.assertEqual(error_message_flappy, __)\n\n        try:\n            still_available = polly.fly()\n        except AttributeError as e:\n            error_message_polly = e.args[0]\n        self.assertEqual(error_message_polly, __)\n\n::footer\nif __name__ == '__main__':\n    unittest.main()\n\n\n",
            "samples_count": 1
        },
        "subtitles": {},
        "tests_archive": "/api/step-sources/296694/tests",
        "feedback_correct": "",
        "feedback_wrong": ""
    },
    "id": "296694",
    "time": "2018-05-10T16:28:00.431254"
}