{
    "block": {
        "name": "code",
        "text": "",
        "video": null,
        "animation": null,
        "options": {
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "limits": {
                "python3": {
                    "time": 15,
                    "memory": 256
                }
            },
            "code_templates": {
                "python3": "class AboutAssignments(unittest.TestCase):\n    class Cat:\n        @property\n        def name(self):\n            return self._name\n\n        @name.setter\n        def name(self,value):\n            if value.lower() == \"cat\":\n                raise ValueError(\"cats deserve a proper name\")\n            elif value.lower() == \"dog\":\n                raise TypeError(\"what is wrong with you?!\")\n            else:\n                self._name = value\n\n    def test_validation_reject_invalid_values(self):\n        bob = self.Cat()\n        with self.assertRaises(ValueError):\n            bob.name = __\n\n        bob = self.Cat()\n        with self.assertRaises(___):\n            bob.name = \"dog\""
            },
            "code_templates_options": {},
            "samples": [
                [
                    "",
                    ""
                ]
            ]
        },
        "subtitle_files": [],
        "source": {
            "execution_time_limit": 5,
            "is_memory_limit_scaled": true,
            "test_archive": [],
            "manual_memory_limits": [],
            "code": "def generate():\n    return [(\"\",\"\")]\n\ndef solve(dataset):\n    return \"\"\n\ndef check(reply, clue):\n    return 1\n\n",
            "manual_time_limits": [],
            "execution_memory_limit": 256,
            "is_time_limit_scaled": true,
            "templates_data": "::python3\n::header\nimport unittest\n__ = \"-=> FILL ME IN! <=-\"\n\nclass ___(Exception):\n    pass\n\n::code\nclass AboutAssignments(unittest.TestCase):\n    class Cat:\n        @property\n        def name(self):\n            return self._name\n\n        @name.setter\n        def name(self,value):\n            if value.lower() == \"cat\":\n                raise ValueError(\"cats deserve a proper name\")\n            elif value.lower() == \"dog\":\n                raise TypeError(\"what is wrong with you?!\")\n            else:\n                self._name = value\n    \n    def test_validation_reject_invalid_values(self):\n        bob = self.Cat()\n        with self.assertRaises(ValueError):\n            bob.name = __\n\n        bob = self.Cat()\n        with self.assertRaises(___):\n            bob.name = \"dog\"\n\n::footer\nif __name__ == '__main__':\n    unittest.main()\n\n\n",
            "samples_count": 1
        },
        "subtitles": {},
        "tests_archive": "/api/step-sources/296708/tests",
        "feedback_correct": "",
        "feedback_wrong": ""
    },
    "id": "296708",
    "time": "2018-05-10T16:28:22.717940"
}