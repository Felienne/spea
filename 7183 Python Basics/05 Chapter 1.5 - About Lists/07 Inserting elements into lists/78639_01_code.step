{
    "block": {
        "name": "code",
        "text": "<p>Try to figure out these insertions into lists.</p>",
        "video": null,
        "animation": null,
        "options": {
            "execution_time_limit": 5,
            "execution_memory_limit": 256,
            "limits": {
                "python3": {
                    "time": 15,
                    "memory": 256
                }
            },
            "code_templates": {
                "python3": "gandalf_says = ['you', 'will', 'pass']\n\ngandalf_says[1] = 'shall'\nassertEqual(__, gandalf_says)\n\ngandalf_says.insert(2, 'not')\nassertEqual(__, gandalf_says)\n\ngandalf_says.insert(0, 'Arthur')\nassertEqual(__, gandalf_says)"
            },
            "code_templates_options": {},
            "samples": [
                [
                    "",
                    ""
                ]
            ]
        },
        "subtitle_files": [],
        "source": {
            "execution_time_limit": 5,
            "is_memory_limit_scaled": true,
            "test_archive": [],
            "manual_memory_limits": [],
            "code": "def generate():\n    return [(\"\",\"\")]\n\ndef solve(dataset):\n    return \"\"\n\ndef check(reply, clue):\n    return 1\n\n",
            "manual_time_limits": [],
            "execution_memory_limit": 256,
            "is_time_limit_scaled": true,
            "templates_data": "::python3\n::header\nimport unittest\n__ = \"blank\"\ndef assertEqual(x,y):\n    if x == y:\n        pass\n    else:\n        message = str(x) + ' is not ' + str(y)\n        raise AssertionError(message)   \n::code\ngandalf_says = ['you', 'will', 'pass']\n\ngandalf_says[1] = 'shall'\nassertEqual(__, gandalf_says)\n\ngandalf_says.insert(2, 'not')\nassertEqual(__, gandalf_says)\n\ngandalf_says.insert(0, 'Arthur')\nassertEqual(__, gandalf_says)\n\n",
            "samples_count": 1
        },
        "subtitles": {},
        "tests_archive": "/api/step-sources/296549/tests",
        "feedback_correct": "",
        "feedback_wrong": ""
    },
    "id": "296549",
    "time": "2018-05-10T16:22:53.303351"
}