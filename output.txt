<p></p>While programming you will often want to 'print' something to the screen. In Python, you use the print() function for that. <br>It prints what ever is between the round brackets.<div><br></div><div>Like this<p></p>In the previous lesson we printed numbers, like this<p></p>Printing in Python can be done with print and round brackets () and single quotes '', like we have seen before<p></p>In the previous lesson we have printed numbers and texts. In this lesson we are going to store numbers and texts!<div><br></div><div>To store things we use <i>variables.</i>﻿ A variable is a name we give to a value, like temperature, pressure, age or angle. To store a variable we use a name, an equals sign and the value, like this<p></p>We just stored a whole number in a variable. In Python and other programming languages this is called an <i>integer</i>.<div><br></div><div>We can also store non-integers. In Python we call those <i>floats</i>. The syntax to store them is the same<p></p>Once a number is stored, we can of course do more with it than just printing!<div><div>For example, we can use it in calculations<p></p><div><div>In the previous exercise we updated the value of an existing variable, like this<p></p>Sometimes, you want to assign two variables in one line of code. Not all programming languages can do this, but Python can. It works like this<p></p><p></p><p>Remember we could print strings with single quotes '<b>﻿</b> but also with double quotes \". These two lines of Python are equal to each other<p></p>Remember we could also print strings with triple double quotes \"\"\<p></p><p>Like we store numbers and text, we can also store <i>lists</i>. We will work with lists a lot in Python, and there will be more extensive chapters on working with lists. In this section we focus on storing lists.</p><p>Storing in principle works like storing numbers and strings, we use a name followed by an equal sign<p></p><p>In the previous step we have stored a list of numbers, but we can have lists of anything we want!</p><p>For example a list of strings, like a list of students in a class. Again we start with a name and an equal signL</p><p></p><pre><code>students = </code></pre><p></p><p>Then again we use square bracket to enclose the list in<p></p>In the previous lessons we have used print to print numbers, like this<p></p><p>In the previous step you saw this error<p></p><p class=\"wysiwyg-text-align-left\">Let's look at that error again<p></p>In the previous lessons we have used variables to store text too, like this<p></p><p>In the previous step we got another error message this time<p></p><p>In previous lessons we have printed text, like this<p></p><div>In the previous step, you have seen this error<p></p><p class=\"wysiwyg-text-align-left\"></p><p>Now that you have set your first steps in Pythonland, we can learn a new programming concept. The assert.</p><p>An assert is used to check whether something is true. It can be very helpful when writing programs, since we can use it to verify things of which we assume they are true. Because you will see that we sometimes assume things that are not true at all!</p><p>Let's think of something that is True. For example 1+1 is equal to 2. <br>There is a special command in Python to check if something is true or not. </p><p></p><pre><code>assertEqual(1+1, 2)</code></pre><p><br>You can think of this as saying<p></p>Now let's try something more crazy and ask Python to verify that 1+1 = 5, which is course is wrong.<br><br>What would happen if we feed the assertEqual two things that are not equal?<p></p><div>In the previous step we had<p></p><div>The nice thing about assertEqual is that it shows us the values of the two things that were passed. <br>When you passed the values <b>4</b> and <b>__</b> you saw this error message<p></p>In a lot of subsequent puzzles, you will have to make sure an assertEqual 'passes'. That means we feed it two equal things and no error occurs when we run is.<br><div><br></div><div>Like we have done in previous puzzles, you will have to change the __  into the right value, but often, <span>the assertEquals will be combined with other statements, like assignments. That means the blank can be in different places that in the assert itself<p></p>Sometimes one puzzle will have multiple assertEquals, like this<p></p><p>Lists are an important part of programming. Often you want to store more than just one number or text. In the About assignment lesson we have already seen the basic syntax of a list. You choose a variable name, an equal sign and then rectangular brackets to separate the items.</p><p></p><pre><code>temperatures_this_week = [10, 11, 17, 18, 21, 22]</code></pre><p></p><p><span>If the items are strings, they need to be enclosed in quotes (single or double)<p></p>It often matters how many items are in a list, and for this Python has a special function, called len(). It is short for length. <div><br></div><div>Like print you use it with two round brackets. We store the length in a new variable called length<p></p>You can also create an empty list. That sounds weird but it can be useful, for example if you will be filling the list later. <div><br></div><div>An empty list is created with just two rectangular brackets, like this<p></p>So far we have created lists at once, by assigning a whole list to a variable<p></p>The append statement you have just seen works a bit differently from what we have seen before. <div><br></div><div>It has a format with a dot that we have not seen before.<div><br><div></div><pre><code><div>lucky_numbers.append(4)<br></div></code></pre><div><br></div><div>What this means is we take a list (called lucky_numbers) and to that we append an element (the element 4 in this case)</div><div><br></div><div>Append here is called a <i>method</i>, <span>and lists support a number of different methods. If you are interested to explore what can be done with lists, the <a href=\"https<p></p>You might wonder why we want to store things in lists at all! Why not just use a bunch of variables, like this<p></p>Once we have created a list, like this<p></p><p>Well that was weird, wasn't it? If you want to get the first element of a list, you need to get element zero (0)<p></p>Maybe you cannot imagine it yet, but sometimes you want to start at the end of a list, that is also possible by using negative numbers in between the rectangular brackets<p></p><p>Okay, maybe that was tricky indeed! When reading a list from the end, we do start at (negative) 1 and not zero. <br>It makes some sense since -0 is equal to 0, but still. </p><p>This is really tricky, so do not worry! The fact that you start at zero can take some getting used to, it still confused me sometimes after decades of programming!</p><p></p><p>We can now create lists in two ways, directly assigning a number of elements<p></p><p>Range is a function that creates a range of numbers, like this<p></p>As you have seen ranges are different from lists because an assertEqual shows they are not equal. <br><br>Trying to print variables to see what they contain is a good strategy to use, also when you will be programming bigger programs later.<div><br></div><div>But, we can also verify this in code. As you move on in these lesson and will work more with different types, it is useful to know how to check this. We will explore it in the next step.</div><p></p>As you have seen ranges are not lists. But because they are similar we can convert a range into a list using the list() method<p></p>Most often when you will encounter a range that is converted to a list in this way<p></p><p>If a list starts at zero, we do not need the first argument of the range method, it may be omitted.</p><p>That means that this line of code<p></p>You can add text and also images, math formulas, code examples and much more in this theory step.<p></p>In the previous lesson we retrieved one element at a time from lists, like this<p></p>Hier wat uitleg over de slices nog.<p></p>Both parts (before and after the <p></p>In the previous step you have seen that removing either the beginning or the end index leads to Python using the whole list. <div>This code<p></p>If you want to know whether something is in a list, we can use the 'in' keyword. Like this<p></p><p>In previous lessons we have seen lists as a means to store more items in one variable.</p><p>Python supports many more (we will not learn about all of them in this module!) <span class=\"wysiwyg-color-red\">TODO hier evt een link naar module 2 als die er is als teaser.</span></p><p>But there is one we will learn<p></p>As you have seen in the previous step, this dictionary<p></p>Accessing elements of a dictionary looks, syntactically, like accessing a list<p></p><p>You have seen what dictionaries can do, that is<p></p><div>In the previous step we have seen the names for the two parts in a dictionary<p></p>In the previous step, you have seen this error message<p></p>There is a second way to obtain elements from a dictionary, which is the <code>get()</code><p></p><p>In the previous lesson, we created a dictionary at once, with an initialization<p></p><p>If you tried append in the previous step, you saw this error message<p></p><p>The update operation not only adds elements, but also changes them.<br>Suppose our dictionary contains these items<p></p>In addition to updating with the update operation, dictionaries can also be added to and updated with rectangular brackets.<div>Explore it in the next step!</div><p></p><p>Like lists, dictionaries can be updated. For lists, we used insert<p></p><p>In the exercises so far we have printed either numbers or text, like this<p></p>If you tried the code without str(), like this<p></p><p>There is an easier way of printing, which is<span> format. It can mix text and numbers without casting, i.e. without using str() around the number.</span></p><p><span>Explore it in the next step.</span><br></p><p></p>Sometimes you will want to print only part of a text. <div><br></div><div>For example when you are reading information from a file (which we will teach you about later!) and you read a file with <a rel=\"nofollow\" href=\"https<p></p>Sometimes you want to get a specific part of a string, since you know exactly what you are looking for.<div><br></div><div>For example, if your data is<p></p><p>Like in lists, we can use slices [<p></p>Even though you only know a few Python commands, you can create a small program already!<div>In this exercise we will make a translation program with the commands we already know, step by step.</div><div><br></div><div>In the end, we will have a program that takes small calculations, like this<p></p>In the next lesson we will translate the whole calculation.<p></p>We are working on a program that will translate<br><div><br></div><div><b>1 + 1 = 2</b></div><div><br></div><div>into<p></p><p>In all exercises so far, all lines of Python that you typed, always were executed. </p><p></p><pre><code>temperature = 21                            #&lt;-- always happens<br>list_of_bands = ['U2', 'B52's', 'Boyz2Men'] #&lt;-- always happens<br>favorite_band = list_of_bands[2]            #&lt;-- always happens</code></pre><p></p><p><span>That sounds totally logical, but in this lesson, we will explore the if statement, which can cause lines to only be executed in certain situations.</span><br></p><p> </p><p></p><p>Code within an if statement consists of two parts, a condition and a body. Globally, it looks like this<p></p><p>Now that we know the structure of the if, let's explore it's meaning. <br>The condition is something than can be True or False. In the next lesson, you will learn more about conditions and how they work.<br>For now, all conditions will be of the form </p><p></p><pre><code>x &lt; 5<p></p><p>An if statement can be combined with an else, like this<p></p>Sometimes you will want to check a number of options and respond accordingly. For example, whether a value is 1, 2 or 3. For this you can use an elif to test different conditions. It looks like the if-else structurally<p></p>Sometimes you want to check more than 2 options. This can be done with a bigger statement, the if elif else statement. It looks like an if with more options<p></p>In previous lessons, we have compared elements simply with greater than (&gt;) and smaller than (&lt;). <div><br></div><div>For example, we have seen<p></p>In addition to &lt; and &gt; there are also ≥ (greater than or equal to) and ≤ (less than or equal to), but they are written a bit different than in math class. <div><br></div><div>Explore them in them next step.</div><p></p><p>In addition to checking is this an smaller or larger, we can also test if two things are exactly equal. For example<p></p>We can also test if things are *not* equal to each other. In mathematics, we use ≠ for that. <div><br></div><div>For example<p></p>TODO<p></p><p>In programming, a very important concept is the condition. </p><p>Secretly, you have seen a lot of conditions already.</p><p>For example, you saw<p></p><div><span>Maybe you have noticed that we wrote that expressions evaluate to True rather than true. </span><span>We say 'it is True' rather than 'it is true' since True and False are Python commands.</span></div><div><br></div><div>We can print the results of conditions directly, resulting in True or False.<br></div><div>Explore it in the next step.</div><i></i>﻿<p></p>True and False are Python commands, so they can also be used in code.<div><br></div><div>For example, we can write<p></p>So far, I guess, this was pretty reasonable, and what you would expect. <br>The next few evaluations to True or False are going to be a bit weird, beware!<p></p>Generated lesson<p></p><p>Remember that we created a dictionary in the previous lessons? The code was something like<p></p>The first thing we need to know is how to work on multiple items in a list.<div><br>When we have items in a list, we can 'loop' over them using for. Like this<p></p>Note that like in the if statements of the previous lesson, four spaces are placed before the things inside the loop<p></p>In the previous step, we have done something for all elements in a list, like this<p></p><p>Remember that the 0 at the start of a range is optional. So you can also use<p></p>Remember to pay attention to what is in out outside of the body of the loop. Inside the body will be executed in each iteration of the loop. Outside it, only once, after the loop has ended.<div><br></div><div>Explore it in the next step.</div><p></p>A common pattern is working with loops is to start with an empty list, and add items to that list, based on a calculation in the loop.<div><br></div><div>For example, if we want to create a new sentence with capitalized words (rather than printing each item), we would do it like this<p></p>You should now be able to transform the long, duplicated code from the previous week into something nice and short. Use the building blocks you have learned in this lesson.<div><br></div><div>Try to improve this code in the next step, using a for, starting with an empty list and a ' '.join.</div><div><br></div><div><pre><code>calculations_to_letters = {'2'<p></p>When iteration over a list, or over a range of numbers, sometimes you will want to skip a certain number. For example, if we have a list of sensor values<p></p><div>If we want to print only the positive numbers in a list, we can use an if, like you just saw in the previous step<p></p><span class=\"wysiwyg-color-red\">TODO<p></p>In the previous step we have skipped some elements of a list, based on a condition<p></p><p>Before, we saw the pattern of doing something with list items on all elements of a list, to create a new list, like<p></p><p></p>In previous lessons we have seen 'for loops'. We use a for loop when we know, upfront, how many iterations are needed.<div><br></div><div>When looping over a list with for, we know how many steps we need to take<p></p><div><div><div><span>Another form of a loop is the while loop. It looks different from a for loop, since it starts with a condition<p></p><p>You have just seen your first 'overflow' error.</p><p><img alt=\"\" src=\"https<p></p><p>In the last lesson we saw while loops for the first time. <br>All for loops can be written as while loops*. For example the loop we have jus seen in the last step</p><p></p><pre><code>times = 0<br>while times &lt; 4<p></p><p class=\"wysiwyg-text-align-left\"></p><p>Now of to loops that we cannot express with a for!</p><p>Imagine we are playing a very simple guessing game. We simple keep trying random values between 0 and 10 until we hit the answer (7) in this case.</p><p>How often will the program below run? Can we know up front?</p><p></p><pre><code><p>secret_value = 7                      #&lt;-- the secret value (not so secret in this case of course)<br>guess = 1                             #&lt;-- the first guess we try<br>while secret_value != guess<p></p>You now know about for and while loops. In general people prefer to use for loops where possible, and while loops only when a for loop is not possible, but sometimes while loops are also used as replacement for for loops.<div><br></div><div>In this weeks assignment you will think about for and while loops in a problem of your choosing!</div><p></p>On the lessons before, we have looped over lists, leaving the lists \"in tact\".<div><br></div><div>After iterating over a list, the list itself is still the same.</div><div>Verify this in the next step. </div><div><br></div><p></p>There are other forms of looping too, that 'consume' the list. That means, the list is shortened step by step, and one element is peeled of.<div>An example of such a command is pop().<br></div><div><br></div><div>Beware, pop() removes the <b>last</b> element of the list!</div><div><br> We first show it without a loop<p></p><p></p><p>With a pop() function, we can also loop. <br></p><p>We could use code like this<p></p>The two options we have are<p></p>So far, the True and False statements we have seen were somewhat predictable.<div><br></div><div>The results of this code are not really surprising<p></p><p>Yes, you have learned that 0, when used in a condition is False, and that all other numbers are True. Even numbers below 0 are True.</p><p>Now that is a bit weird! There are also programming languages that do not even allow to write something like<br><br></p><pre><code>if 5<p></p><p>In the next lesson, we will see a similar weird evaluation to True/False.</p><p></p>So 0 evaluated to False, and all other numbers to True.<div><br></div><div>What would happen if we try to evaluate a list...?</div><div><br></div><div>See for yourself in the next step.</div><p></p><p></p>Indeed, all lists are True, except the empty list, which is False. <div><br></div><div>I guess by now you understand why... it is the same reason that 0 is False and other numbers are True. To shorten a loop over a list.</div><div><br></div><div>How can we shorten this?</div><div><br></div><div><pre><code>odd = [1, 3, 5, 7, 9, 11]<br>while odd != []<p></p>We have learned in this lesson and the previous one, that we can loop over lists with very short statements<p></p>Generated lesson<p></p>Generated lesson<p></p><p>So far, we have seen a number of different types in Python.</p><p></p><ul><li>Simple types for single items<p></p><p>Tuples, like lists, consist of multiple items. They are create with round brackets () rather than [] for lists or {} for dictionaries. This creates a tuples of the numbers 1, 2 and 3.</p><p></p><pre><code>count_of_three = (1, 2, 3)</code></pre><p></p><p>In many ways, tuples are like lists. <span>For example, element retrieval works the same. <br><br>Explore it in the next step.</span></p><p></p><p>But, there are also differences between lists and tuples. The most important difference is that tuples cannot be changed!</p><p>That is strange right?<span> Try it in the next step.</span></p><p></p>When you try to change an element, you get a type error<p></p>We get a similar error, since tuple has no append<p></p>So, when you are modeling problem later, and you know something will not change, using a tuple is better.<div>That way, Python will remind you that changes cannot be made.</div><p></p>Generated lesson<p></p>Before we explained that when data is not mutable (i.e. it should not change) you use a tuple instead of a list. This is a technical decision, since you really cannot change a tuple, Python will not let you.<div><br></div><div>There is a second reason to use a tuple, is that the elements are not of the same type.</div><div><br></div><div>So here you'd use a list, since all elements are integers<p></p><p>The situation gets even a bit more tricky! If we are deciding to use a list or a tuple, we are not only looking at the datatype, but also at the intent.</p><p>For example, it we store longitude and latitude, which both are floating point numbers, many people would still use a tuple, since they represent different sort of numbers. A good rule of thumb is that when the elements together from one item<p></p>A common use case for tuples is to nest tuples, i.e. to create tuples of tuples, to create more complex structures.<div>Explore this in the next step.</div><p></p>What is also common is to have lists of tuples, like this.<br><br>delft = (52.0116, 'N', 4.3571, 'E')<div>hawaii = (19.8968, 'N', 155.5828, 'W')</div><div>maui = (20.7984, 'N', 156.3319, 'W')</div><div><br></div><div>trip = [delft, hawaii, maui]</div><div><br></div><div>This might look a bit strange, since we have a list of different things now (strings and floats), but since these are inside the elements of the list, the list is homogenous after all!</div><p></p>We already know that we can access elements of a tuple, like we can access elements of lists. So it we have a tuple like this<p></p><p>What does commonly happen is that we have a list of tuples, for example a list of people, like this<p></p><p>Indeed, if we loop over a list of tuples, each item is a tuple.</p><p>a = ('Albert', 'Einstein')<br>b = ('Barbara', 'Liskov')<br>c = ('Charles', 'Babbage')<br>d = ('Dorothy', 'Vaughan')<br>cool_people = [a, b, c, d]<br><br>for person in cool_people<p></p><p>In the previous step we got last names by looking inside the tuple, like this<p></p><p>In math class, you have certainly learned about functions. For example, a canonical function is the square function.<br><br>f<p></p><p>An example of a function we have seen is len().</p><p></p><pre><code>beatles = ['John', 'Ringo', 'George', 'Paul']<br>number_of_beatles = len(beatles)</code></pre> <br>Like f(n), len(beatles) takes an argument, and returns a value. In the case of len() the argument is list and the value is integer.<br><br>This is commonly denoted as list -&gt; int.<div><br></div><div><p></p></div><p></p>When we feed Python the wrong type of argument, often we will get an error.<div><br>Try this in the next step.</div><p></p><p>When we feed Python a wrong type, most often we get a TypeError that is quite helpful. </p><p><img src=\"https<p></p>What we have not seen yet, is what happens when we feed Python the wrong number of elements.<div><br>Let's try that too!</div><p></p>Here the errors, again, are pretty clear<p></p>In later modules, we will also learn how to create our own functions.<div><br></div><div>For now, the next lesson is about functions that do not look like functions!</div><p></p>Some functions are clearly functions, but they do not look the part. <br><br>An example is +. + certainly is a function, it takes two numbers and returns the sum of those numbers. <br>So its type is two integers -&gt; integer.<br>This is commonly written as integer x integer -&gt; integer<div><br></div><div>Based on what we have seen, the add function should be a name, followed by a round bracket, an comma's to separate the arguments<p></p><p>Another hidden function is indexing!</p><p></p><pre><code>primes = [2, 3, 5, 7, 11, 13]<br>second_prime = primes[1]      #&lt;-- indexing is like a function<br>print(second_prime)</code></pre><br>Think about that a bit more in the next quiz.<p></p><p><br></p><p><br></p><p></p><p>Indexing is a function that takes a list (primes) and an integer (1) and returns an integer.</p><code><pre><code>primes = [2, 3, 5, 7, 11, 13]<br>second_prime = primes[1]      #&lt;-- indexing is like a function<br>print(second_prime)</code></pre><br></code>Even though the code is written in a different way, what happens internally is something like second_prime = index(primes, 1)<p></p><p>Functions somehow are logical to us, since they also occur in mathematics. </p><p><span>However, functions in programming are a bit different, in that they can also return.... nothing, but still do something.</span></p><p><span>An example we have seen numerous times is<p></p>A function that does something other than simply returning a value, is said to have 'side effects'.<div><br></div><div>Realizing what effects a function has it paramount to understanding programs, so we will practice with it a lot after this lesson.</div><p></p><p>Like functions that return something, functions that have side effects are sometimes written in alternative ways.</p><p>For example, list.append()</p><p></p><pre><code>beatles = ['John', 'Ringo', 'George', 'Paul']<br>beatles.append('Pete')</code></pre> <br>What is/are the parameter(s) of this function? Answer that in the next step.<p></p><p></p><div>The side effect of print() is simply putting something on the screen. <br><span><br>The side effect of append() is an interesting one. It changes one of its own parameters.<br><br></span></div><div><code><pre><code>beatles = ['John', 'Ringo', 'George', 'Paul']    #&lt;-- beatles contains 4 elements<br>beatles.append('Pete')                           #&lt;-- beatles now contains 5 elements</code></pre></code></div><div><br></div>After the append(), beatles has one extra element. This is still a side effect, because it is not returning anything.<br><div><br></div><p></p><div><span class=\"wysiwyg-color-black\">Now, some functions return something <i>and</i> have side effects!</span></div><div></div><div>An example of a function that is pop()</div><div><br></div><div><pre><code>stack = [1, 2, 3, 4]<br>lucky_number = stack.pop()    #&lt;-- pop gets the last element (4) and also removes it<br>print(lucky_number)           #&lt;-- lucky_number now contains 4<br>print(stack)                  #&lt;-- stack now contains [1, 2, 3]</code></pre> <br><div>Like append, and +, pop() is also a function that is written in a different way. What we actually have internally is pop(stack). Pop is a function <span>on a list, and thus is of type list -&gt; integer.<br><br>But the list also changes, because the final element is removed. That still counts as a side effect.</span></div><div><br><br><div><br></div></div></div><p></p><p>Now maybe you have noticed that some functions can be applied on different types.</p><p>Explore that in the next quiz.</p><p><br></p><p></p>Indeed, abs() can be applied on different types<p></p>+ too can be applied on float and int, meaning a regular mathematical plus, but also on strings and lists. <br>Then it means combining the lists, called concatenation. <br><br>Python determines what to do with the + based on the types of the parameters.<br><br>Have you tried adding two different types? int and float will work, but what about list and string? And list and int? <br><br>Explore that in the next step.<p></p>Indeed, while lists and strings can be added to itself, they cannot be added to each other. <br><br>The associated error messages are pretty informative<p></p>In this lesson, you will learn a new way of looping over lists. Before we do that, let's revisit what we already know about loops.<div>Remember when we want to capitalize all words in this sentence<p></p>The new Python command is called comprehension, and it's a new way to loop over lists. <div><br>The old version that you already know, and saw in the previous step is<p></p>This code too can be made a lot shorter with a comprehension.<div><br></div><div>We had this code<p></p><p>Remember that, when looping over a list of tuples, we could unpack them by giving the tuple elements names? <br><br>It worked like this<p></p><p>So far, we have seen loops that run over a list or a range. <br><br>For example, we have seen<p></p>The order in which we places the loops matters. This loop we just printed<p></p>Indeed, the order in which the for loops are placed matters, Python wil execute the inner loop, for each element of the outer loop.<div><br></div><div>We could use nested loops to generate a list of integer points in Cartesian coordinates. Suppose we want to print all points between (-5,-5) and (5,5). </div><div><br></div><div><span class=\"wysiwyg-color-red\">TODO mooi plaatje van the cartesian plane hier</span></div><div><br></div><div>Can you write the code to do that?</div><div><br>Try it in the next step.</div><div><br></div><p></p>So far, the list we have seen contained various different things. <br><br>For example, we have seen a list of numbers<p></p><p>We can store arbitrary things in lists, so also lists! For example, suppose we have these lists<p></p>Matrices are an important part of many fields of mathematics. With the basic building blocks we have learned to far, we can represent matrices. For example, if we want to create the 3x3 identity matrix, we could use three lists to represent the rows<p></p><p>There are many reasons that people like Python. One of the reasons is the easy to read syntax. Another reasons is that, in addition to the normal Python syntax elements, there are many Python 'modules'.</p><p><span>You can think of modules as small Python programs, which give you extra commands.</span><br></p><p>In fact we have already seen a module, when we used random numbers. For this, we needed to use<p></p>You might wonder where this module business is going and what is has to do with matrices <p></p><p>Let's use NumPy to create a matrix in a nicer way.</p><p>Before, we used a nested list to create the identity matrix<p></p>As you saw in the last step, NumPy matrices print nicely, you can easily see this is the identity matrix.<div><br></div><div><span class=\"image-wrapper\"><img src=\"https<p></p>These were just the basic things you can do with a NumPy matrix, in later lessons we will do more cool things like matrix multiplication, eigenvalues and more.<p></p><div>This message is only for students participating in the MasterClass Next Generation Robotics!</div><div><br></div>Great, y<span>ou reached the end of the lessons, here is the code to submit<p></p><p>So far, we have presented you with guided steps. From now on, all lessons are exploratory. We are not sure we will keep all lessons like this, but this is the way they are now. </p><p>In all steps, you will have to fill blanks to learn about new statements, but they will look a bit differently. </p><p>We will guide you through one example and then you are on your own.</p><p><br></p><p></p><p>Enjoy the next steps of learning Python and let us know if you are stuck!</p><p></p>Some functions are clearly functions, but they do not look the part. <br><br>An example is +. + certainly is a function, it takes two numbers and returns the sum of those numbers. <br>So its type is two integers -&gt; integer.<br>This is commonly written as integer x integer -&gt; integer<div><br></div><div>Based on what we have seen, the add function should be a name, followed by a round bracket, an comma's to separate the arguments<p></p><p>Another hidden function is indexing!</p><p></p><pre><code>primes = [2, 3, 5, 7, 11, 13]<br>second_prime = primes[1]      #&lt;-- indexing is like a function<br>print(second_prime)</code></pre><br>Think about that a bit more in the next quiz.<p></p><p><br></p><p><br></p><p></p><p>Indexing is a function that takes a list (primes) and an integer (1) and returns an integer.</p><code><pre><code>primes = [2, 3, 5, 7, 11, 13]<br>second_prime = primes[1]      #&lt;-- indexing is like a function<br>print(second_prime)</code></pre><br></code>Even though the code is written in a different way, what happens internally is something like second_prime = index(primes, 1)<p></p>So far we have seen two important built-in constants in Python, <code>True</code> and <code>False</code>.\n<div><br></div><div>These represent something that is True or False. There is one more of these we need to know about, and that is None.</div><div><br></div><div>None represents the situation where a variable has no value. I know that sounds very weird! None is a value but also it isn't. </div><div><br></div><div>Yup! Let's just look at an example first.</div><p></p>So a function that does not return anything, still returns something, the built-in constant None.<div><br></div><div>None is different from both True and False, and 0. You can explore that in the next step.</div><p></p>There are some functions that sometimes return None. An example of this is getting an element from a dictionary with get().<div><br></div><div>In earlier lesson, we used get() with two arguments<p></p>Suppose we want to check whether our retrieval from the dictionary has resulted in None, for example because we want to print the resulting word, but only when it is found.<div><br></div><div>We would do something like<p></p>In addition to None, there are two more similar constructs you should know about, when working with large and small numbers.<div><br></div><div>While we human can count arbitrary far, computers cannot. There is a limit to the numbers they can store.</div><div><br></div><div>The highest number that Python can store is<p></p>Indeed, Python returns inf, which represents infinity. We can calculate with infinity in Python and it obeys the normal rules of infinity.<div><br></div><div>For example<p></p>Now this of course leads to an interesting question....!<div><br></div><div>We now that in mathematics, infinity / infinity is undefined. What would it be in Python?</div><p></p>You can add text and also images, math formulas, code examples and much more in this theory step.<p></p><p>Not all numbers are created equal, numbers in Python have different types.</p><p>Integers, like 5 or 2198 are called 'int'<br>Floating point numbers, like 3.1415 and 0.0.71 are called 'float'</p><p>We can ask Python what type a certain variable is, by using type() on the variable.</p><p>Like this